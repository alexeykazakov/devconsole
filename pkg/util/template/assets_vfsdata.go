// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 3, 4, 14, 37, 26, 955596166, time.UTC),
		},
		"/outerloop": &vfsgen۰DirInfo{
			name:    "outerloop",
			modTime: time.Date(2019, 3, 4, 10, 32, 34, 9236132, time.UTC),
		},
		"/outerloop/buildconfig": &vfsgen۰CompressedFileInfo{
			name:             "buildconfig",
			modTime:          time.Date(2019, 3, 4, 10, 32, 34, 8842351, time.UTC),
			uncompressedSize: 1117,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x41\x6f\xdb\x3c\x0c\xbd\xfb\x57\x10\x41\x8f\x9f\x5d\x7c\x57\x01\x3b\xb8\x69\x96\x04\x5b\x93\x20\xce\x3a\xec\x14\x30\x36\xed\x68\xb5\x25\x41\xa6\x82\x05\x86\xff\xfb\x60\x29\x69\x93\x0c\xdb\xa1\x9b\x2f\xa6\x48\xe9\x3d\xf2\x91\x44\x23\x9f\xc9\xb6\x52\x2b\x01\x3b\x27\xeb\x22\xd1\x86\x54\xbb\x97\x25\x27\x52\xdf\x1f\xfe\x8f\x5e\xa4\x2a\x04\x3c\x0c\xb1\xb1\x56\xa5\xac\xa2\x86\x18\x0b\x64\x14\x11\x40\x8d\x3b\xaa\xdb\xc1\x02\x40\x63\x04\x74\x5d\xb2\xc0\x86\xfa\xbe\xeb\xc0\xa2\xaa\x08\xee\x5e\xe8\xf8\x1f\xdc\x1d\xb0\x76\x04\xe2\x03\x24\xcb\xdd\x77\xca\xf9\x89\x18\x93\xcf\xfe\x39\xf4\xbd\x07\xe8\x3a\x7f\x19\xfa\x5e\x78\x3b\x3c\xf1\x50\xa4\x8a\x70\x4b\x61\x43\x17\x2c\x51\x6b\x28\x1f\xe8\xb5\x63\xe3\x38\x24\xc2\x3a\xfc\x01\x42\xf2\xf3\x06\x2b\xca\xd8\x12\x36\x1b\xac\x4e\xa1\x1b\x20\x51\x23\x53\xcb\x11\x40\xab\x9d\xcd\x29\x20\x54\x92\xcf\x50\xce\x4a\x9f\x95\x54\x05\xfd\xb8\x2a\x22\x55\x4a\x33\xb2\xd4\xaa\x85\x11\x1a\x73\x2d\x61\x25\x39\x76\x56\x8e\xce\x45\x02\x58\x2a\xdf\x8d\x64\xa9\x7c\x45\xe2\xa3\x21\x01\x53\xe9\x93\x66\x8b\x4c\xd5\x31\x64\x1b\x4a\xc8\xae\x7c\x00\xa5\xd5\xcd\xd9\xfe\xa3\x34\x17\xe2\x64\x86\xf2\x64\xed\x14\xcb\x86\x6e\x85\x1a\x3e\xa9\x72\x4b\x0d\x29\xc6\x5a\x00\x5b\x47\x27\x3f\xa9\xc3\x99\x2a\x3e\xa1\x3d\xa5\xcf\x93\xc5\x36\x5d\x4f\xb3\x6d\xba\x5a\x4d\x16\x8f\xaf\x6c\xbe\xcf\x02\x46\xb1\xa9\xdf\xab\x4b\x21\xed\xa0\xcb\xe8\x86\x33\x5d\x6f\xe6\x1f\xd3\xf1\x66\xfb\x38\x5f\xff\x42\xf7\x77\x54\xf7\x8c\xb6\x22\xfe\x2d\xe3\x78\xb9\xfa\xe6\xab\xfd\x17\xbc\x68\x59\x96\x98\x73\x9c\x6b\x73\x8c\xd1\x56\xed\x5b\xb5\x61\x0c\x32\xdf\xf2\x08\x80\xad\xac\x2a\xb2\x7e\x27\xe3\x61\x80\xf7\x6e\x77\x6e\x45\x4b\xb9\x25\x16\x30\x9d\x6f\x66\x5f\x1e\xb6\x5f\x27\x0f\xb3\xe5\xf2\xd3\x36\x9b\x8c\xd7\x93\xcd\xf5\x4c\xcd\xdc\xce\x03\x04\x47\xd8\xfc\xf1\x7e\x58\x68\xef\x96\xc3\xdc\x84\xb3\x80\xee\x72\x1e\xe7\x6f\x91\x9f\x01\x00\x00\xff\xff\xe6\xc8\x1f\xfb\x5d\x04\x00\x00"),
		},
		"/outerloop/deploymentconfig": &vfsgen۰CompressedFileInfo{
			name:             "deploymentconfig",
			modTime:          time.Date(2019, 3, 4, 10, 32, 34, 9108045, time.UTC),
			uncompressedSize: 1097,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4d\x6f\xd4\x30\x10\x86\xef\xf9\x15\xa3\xaa\x47\x12\xd4\xab\x25\x0e\x68\xe1\x80\xc4\xc7\x8a\x56\xbd\x4f\x93\xd9\xd4\xd4\x9e\xb1\xec\xd9\x15\xab\x28\xff\x1d\xd9\x2e\xdb\x64\x59\x10\x12\xcc\xc9\x5f\x33\xf3\xbe\x8f\x6d\x0c\xf6\x9e\x62\xb2\xc2\x06\x30\x84\xd4\x49\x20\x4e\x8f\x76\xa7\x9d\x95\xd7\x87\x9b\xe6\xc9\xf2\x60\xe0\x1d\x05\x27\x47\x4f\xac\x1b\xe1\x9d\x1d\x1b\x4f\x8a\x03\x2a\x9a\x06\xc0\xe1\x03\xb9\x94\x47\x90\x6b\x18\x98\xa6\xee\x33\x7a\x9a\xe7\x69\x82\x88\x3c\x12\x5c\x3f\xd1\xf1\x15\x5c\x1f\xd0\xed\x09\xcc\x1b\xe8\xbe\x3c\x7c\xa3\x5e\x3f\x91\x62\xf7\xb1\xa4\xc3\x3c\x97\x02\xd3\x54\x0e\xc3\x3c\x9b\x32\xae\x29\xa5\x14\xf1\x50\x4f\x31\x7a\x5a\x74\x69\x52\xa0\x3e\xb7\x8f\x14\x9c\xed\x31\x19\xb8\x69\x00\x12\x39\xea\x55\xe2\x25\x61\x65\x69\x38\x99\xea\x8b\xa9\xf5\x7e\xd2\x88\x4a\xe3\xb1\xa6\xeb\x31\x90\x81\xaf\xe2\x9c\xe5\xb1\x01\x50\xf2\xc1\xa1\x52\xdd\x5d\xd2\xc8\xb1\x24\xf2\x5f\xa8\xfc\x2d\x99\x1a\x7f\x36\x96\xe3\x9c\x60\x5e\xfb\x49\x31\x47\x2f\xac\x68\x99\xe2\xc9\x44\x0b\xc4\x07\xb3\x14\x53\x3d\x74\xb7\x81\xfa\xee\x3d\x1f\x56\x5a\xdb\x8b\x1d\x6a\x14\xdd\x65\xeb\x3e\x8f\x56\x0e\x89\x87\xc5\xdc\x7a\x1c\xcb\x49\xb0\x3c\xd0\xf7\x15\x9f\xb7\xcc\xa2\xa8\x56\x38\xc1\x15\x86\xb0\x7e\xb8\x71\xcf\x6a\x3d\xb5\xa5\xc2\xd5\x52\xd9\xef\x74\x05\x89\xba\xb8\xb1\xf6\x05\xc1\x56\xa2\x96\x8c\xe2\x34\xcf\x56\x76\x42\x14\x95\x5e\x9c\x81\xbb\xcd\x36\xbf\x8c\x68\xc7\xf1\x19\x5c\xfb\xfc\x6e\x3e\x64\x19\x9b\xc7\x0c\xac\x39\x19\xab\xf3\x2d\x46\xf4\xa7\xc6\xb8\x57\xf1\xa8\xb6\x37\xa0\x71\x4f\xe7\xb7\x91\x35\x2f\x6e\xe4\xdc\xc5\x2e\x8a\x7f\xb1\x50\x7f\x6e\x69\x7d\xab\x91\xd0\xdf\xe1\xf8\x0b\x86\x7f\x27\x6b\xf2\x37\x48\xfa\x23\x00\x00\xff\xff\xad\x19\x87\x0c\x49\x04\x00\x00"),
		},
		"/outerloop/imagestream": &vfsgen۰FileInfo{
			name:    "imagestream",
			modTime: time.Date(2019, 3, 4, 10, 32, 34, 9322575, time.UTC),
			content: []byte("\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x69\x6d\x61\x67\x65\x2e\x6f\x70\x65\x6e\x73\x68\x69\x66\x74\x2e\x69\x6f\x2f\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x49\x6d\x61\x67\x65\x53\x74\x72\x65\x61\x6d\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x7b\x7b\x2e\x4e\x61\x6d\x65\x7d\x7d\x0a\x73\x70\x65\x63\x3a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/outerloop"].(os.FileInfo),
	}
	fs["/outerloop"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/outerloop/buildconfig"].(os.FileInfo),
		fs["/outerloop/deploymentconfig"].(os.FileInfo),
		fs["/outerloop/imagestream"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
